@using System.Data.Odbc
@using System.Linq
@using Mvc.JQuery.Datatables
@model DataTableConfigVm

@{
   Dictionary<string, object> PostParams = new Dictionary<string, object>();
       
   if(Model.JsOptions.Any(e => e.Key.StartsWith("PARAM_"))){
       var postParams = Model.JsOptions.Where(e => e.Key.StartsWith("PARAM_"));
       List<string> _mkeys = new List<string>();
       foreach(var post in postParams){
           string pKey = post.Key.Substring(("PARAM_").Length);
           PostParams.Add(pKey, post.Value);
           _mkeys.Add(post.Key);
       }

       foreach (string a in _mkeys){
           Model.JsOptions.Remove(a);
       }
   
   }
   var json_post_params = new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(PostParams);
    
    
    }

<table id="@Model.Id" class="display dataTable @(Model.TableClass ?? DataTableConfigVm.DefaultTableClass ?? "")" >
    <thead>
        @if (Model.ColumnFilter)
        {
            <tr>
                @foreach (var column in Model.Columns)
                {
                    <th>@column.DisplayName</th>
                }
            </tr>
        }
        @if (!Model.HideHeaders)
        {
            <tr>
                @foreach (var column in Model.Columns)
                {
                    <th>@column.DisplayName</th>
                }
            </tr>
        }
    </thead>
    <tbody>
        <tr>
            <td colspan="@Model.Columns.Count()" class="dataTables_empty">Loading data from server
            </td>
        </tr>
    </tbody>
</table>

<script type="text/javascript">
    (function setDataTable() {
        if(!window.jQuery) {
            setTimeout(setDataTable, 100);
            return;
        }
        var $table = $('#@Model.Id');
        var dt = $table.dataTable({
            "aaSorting": @Html.Raw(Model.ColumnSortingString),
            "bProcessing": true,
            "bStateSave": @Html.Raw(Model.StateSave ? "true" : "false"),
            "bServerSide": true,
            "bFilter": @Model.ShowSearch.ToString().ToLower(),
            "sDom": '@Html.Raw(Model.Dom)',
            "aLengthMenu": [[5, 10, 25, 50, -1], [5, 10, 25, 50, "All"]],
            "bAutoWidth": @Model.AutoWidth.ToString().ToLowerInvariant(),
            "sAjaxSource": "@Html.Raw(Model.AjaxUrl)", 
            @Html.Raw(Model.TableTools ? "\"oTableTools\" : { \"sSwfPath\": \"/content/DataTables/extras/TableTools/media/swf/copy_csv_xls_pdf.swf\" }," : "")
            "fnServerData": function(sSource, aoData, fnCallback) {
                $.ajax({
                    "dataType": 'json',
                    "type": "POST",
                    "url": sSource+'?'+$.param(@Html.Raw(json_post_params)),
                    "data": aoData,
                    "success": fnCallback
                });
            },
            "aoColumnDefs" : @Html.Raw(Model.ColumnDefsString)
            @{
                var Opts = Model.JsOptions;
                System.Text.StringBuilder s = new System.Text.StringBuilder();
                    
                    
                    
                     
                foreach(var o in Opts)
                {
                    s.AppendLine();

                    string opname = o.Key.ToString();

                    string value = (o.Value.ToString().StartsWith("JSFUNC::") ? o.Value.ToString().Substring(("JSFUNC::").Length) : String.Format("'{0}'", o.Value.ToString()));

                    s.AppendFormat(",{0} : {1}", opname, value).AppendLine();
                    
                    
                }
                
            }

            @Html.Raw(s.ToString())
            @if (!string.IsNullOrEmpty(Model.Language))
            {
                <text>
                    ,"oLanguage": @Html.Raw(@Model.Language)
                </text>
            }
            @if (!string.IsNullOrEmpty(Model.DrawCallback))
            {
                <text>
                    ,"fnDrawCallback": @Html.Raw(Model.DrawCallback)
                </text>
            }
                    });
            @if (Model.ColumnFilter)
            {
                <text>
        dt.columnFilter(@Html.Raw(Model.ColumnFilterVm.ToString()));
        </text>
            }
    })();
</script>
