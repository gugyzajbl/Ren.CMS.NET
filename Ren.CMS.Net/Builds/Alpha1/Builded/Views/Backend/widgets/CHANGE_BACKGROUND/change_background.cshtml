<style type="text/css">

    table.tblChangeBG {
    
    width:100%;

    
    
    }

        table.tblChangeBG td:first-child {
            width:50%;
            padding:1px;
            margin:1px;
            vertical-align:top;
            text-align:left;
        }

   table.tblChangeBG td:last-child {
            width:50%;
            padding:1px;
            margin:1px;
            vertical-align:top;
            text-align:right;
        }
        table.tblChangeBG td input, table.tblChangeBG td select{
            width:200px;
        }
   

</style>

@{
    //Load User defined style:
    Ren.CMS.Models.Backend.Layout.changeBackground cB = new Ren.CMS.Models.Backend.Layout.changeBackground();
    
    
    
    MembershipUser Cu = new Ren.CMS.MemberShip.nProvider.CurrentUser().nUser;

    SqlHelper SQL = new SqlHelper();

    string query = "SELECT ISNULL(backgroundImage,'') as backgroundImage, ISNULL(backgroundColor, '') as backgroundColor, ISNULL(backgroundAlign, '') as backgroundAlign, ISNULL(backgroundRepeat, '') as backgroundRepeat FROM ";
    Ren.CMS.CORE.ThisApplication.ThisApplication TA = new Ren.CMS.CORE.ThisApplication.ThisApplication();

    string prefix = TA.getSqlPrefix;

    query += prefix + "Backend_Desktop_Backgrounds WHERE userid=@uid";

    nSqlParameterCollection PCOL = new nSqlParameterCollection();

    PCOL.Add("@uid", Cu.ProviderUserKey);

    SQL.SysConnect();

    System.Data.SqlClient.SqlDataReader BG = SQL.SysReader(query, PCOL);

    List<SelectListItem> ListAligns = new List<SelectListItem>();
    List<SelectListItem> ListRepeat = new List<SelectListItem>();
    
    
    string bgcolor = "#000000";
    string bgimage = "none";
    string bgalign = "center";
    string bgrepeat = "no-repeat";
    if (BG.HasRows)
    {

        while (BG.Read())
        {
            if (!String.IsNullOrEmpty((string)BG["backgroundColor"]))
            {
                bgcolor = (string)BG["backgroundColor"];
            }
            if (!String.IsNullOrEmpty((string)BG["backgroundImage"]))
            {
                bgimage = (string)BG["backgroundImage"];
            }
            if (!String.IsNullOrEmpty((string)BG["backgroundAlign"]))
            {
                bgalign = (string)BG["backgroundAlign"];
            }
            if (!String.IsNullOrEmpty((string)BG["backgroundRepeat"]))
            {
                bgrepeat = (string)BG["backgroundRepeat"];
            }



        }


    }

    cB.Align = bgalign;
    cB.BGImage = bgimage;
    cB.Color = bgcolor;
    cB.Repeat = bgrepeat;

    string Align = cB.Align;
    string BGImage = cB.BGImage;
    string Repeat = cB.Repeat;
    //Build CSS String:
    BG.Close();
    SQL.SysDisconnect();
   

    string style = "";
    }
<script>
    var images = 0;
    $(function () {

    
        $('#BGImage').focus(function () {
            $('#BGImage option').each(function () {

                console.log("Counting Desktop Images....");
                images++;
            });
            var ds = new BackendGui().dataStore;

            ds.isAsync(false);

            ds.setUrl("/BackendHandler/Account/GetBGFiles");
            ds.setHttpVerb("POST");
            ds.setFormat("json");
            ds.doRequest();
            var content = ds.getContent();
            if (content.files.length != images) {
                var u = 0;
                $(this).find('option').each(function () {
                    if(u >0)
                        $(this).remove();
                    else
                        u++;
                });
                for (x = 0; x < content.files.length; x++) {

                    console.log(content.files[x].name);
                    $('#BGImage').append("<option value='" + content.files[x].name + "'>" + content.files[x].name + "</option>");
                 

                }

                images = content.files.length + 1;
            }



        });
    });

    $(function () {
        $('#saveDesktop').click(function () {

            var bgcolor = $('#bgcolor').val();

            var bgimage = $('#BGImage option:selected').val();
            var bgrepeat = $('#Repeat option:selected').val();
            var bgalign = $('#Align option:selected').val();

            if(bgimage != 'none')
            {
                console.log("SSSSS");
                bgimage = 'url("/BackendFileHandler/CustomDesktops/@Cu.ProviderUserKey/'+ bgimage +'")';
            
            }
            $('#mainframe').css("background-color", bgcolor);
            $('#mainframe').css("background-image", bgimage);
            $('#mainframe').css("background-position", bgalign);
            $('#mainframe').css("background-repeat", bgrepeat);

  



        });

        $('#bgcolor').ColorPicker({
            onSubmit: function (hsb, hex, rgb, el) {
                $(el).val('#'+ hex);
                $(el).ColorPickerHide();
            },
            onBeforeShow: function () {
                $(this).ColorPickerSetColor(this.value.replace('#',''));
            }
        })
.bind('keyup', function () {
    $(this).ColorPickerSetColor(this.value.replace('#', ''));
});

        $('#saveDesktop').button();
    });


</script>


  @using (Ajax.BeginForm("Account/SaveDesktop", "BackendHandler", new AjaxOptions{ HttpMethod="POST", UpdateTargetId="result" }  ))
    {

   
<table class="tblChangeBG">

  <tr>
     
      <td><b>Hintergrundfarbe</b></td>
      <td><input name="Color" id="bgcolor" value="@bgcolor" /></td>
  </tr>
  <tr>
      
      <td><b>Hintergrundbild</b></td>
      <td>

          @Html.DropDownListFor(m =>BGImage,new SelectList(cB.StoreForFiles(),"id","name",BGImage))
          <br />
          <a href="javascript: new widgetAction('widget:UPLOAD_BACKGROUND_IMAGE:open')">Neue Datei hochladen</a>

      </td>
  </tr>


    <tr>

        <td><b>Hintergrund wiederholen:</b></td>
        <td>

                   @Html.DropDownListFor(m => Repeat,new SelectList(cB.StoreForRepeat(),"Repeat","name",Repeat))


        </td>

    </tr>

<tr>

    <td>

        <b>Hintergrund-Ausrichtung:</b>

    </td>
    <td>


            @Html.DropDownListFor(m => Align,new SelectList(cB.StoreForAligns(),"id","name",Align))


    </td>
</tr>

<tr><td><div id="result"></div></td><td><input id="saveDesktop" type="SUBMIT" value="Speichern" /></td></tr>
</table>




  }